#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include<sys/wait.h>

#define TRUE 1
#define FALSE 0

#define TOKEN_LENGTH -1;
#define COMMAND_LENGTH -1;
#define NUM_ARGUMENTS -1;


int byebye(){
	exit(1);
	return 1;
}

void movetodir(char* dir){

	if (chdir(dir) != 0)
		perror("chdir() to /dir");
	else
		printf("Changed directory to: %s\n", dir);

}

char* whereami( ){

	char path [100];
	if (path == NULL){
		printf("Null pointer passed into: whereami\n");
		return NULL;
	}

	printf("%s\n", getcwd(path, 100));
	return getcwd(path,100);
}

void  history(char **commands, int cmdCount){

	for(int i = 0; i < cmdCount; i++){
		// if (commands[i] == NULL)
		// 	continue;
		printf("[%d]: %s\n", i, commands[i]);
	}
}

void clearStringPtr(char** ptr, int len){

	for(int i = 0; i < len; i++)
		free(ptr[i]);

	free(ptr);
}

void clearDynArr(char* arr){
	free(arr);
}

void trimNewLine(char buffer[]){

	for(int i = 0; i < strlen(buffer); i++){
		if(buffer[i] == '\n')
			buffer[i] = ' ';
	}
}
/*void start(char *[] param){



}

void background(char *[] param){




}
 */






int main(int argc, char const *argv[]) {

	char cmdBuffer [100];

	char* tokenized = malloc(sizeof(char) * 50);

	char **arguments = malloc(sizeof(char*) * 50);

	// Stores 25 commands
	char** cmdHistory = malloc(sizeof(char*) * 30);

	int numArgs = 0;

	int cmdCount = 0;

	char delimiter [4] = " ";

	int j;

	int pid;

	printf("ChungusShell\n");

	while(TRUE)
	{
		waitpid(pid, 0, WNOHANG);
		printf("# ");

		// Scan in command with possible arguments
		fgets(cmdBuffer,sizeof(cmdBuffer), stdin);
		trimNewLine(cmdBuffer);

		// Capturing the current command with its arguments and adding it to the command history
		cmdHistory[cmdCount] = malloc(strlen(cmdBuffer)*sizeof(char));
		strcpy(cmdHistory[cmdCount++], cmdBuffer);

		// Tokenizing the command
		tokenized = strtok(cmdBuffer, delimiter);

		while(tokenized != NULL){
			arguments[numArgs] = malloc(sizeof(char) * (strlen(tokenized) + 1));
			strcpy(arguments[numArgs++] , tokenized);
			arguments[numArgs] = malloc(sizeof(char) * (strlen(tokenized) + 1));
			tokenized = strtok(NULL, delimiter);
			// if(tokenized == NULL)
			// 	break;
			// strcpy(arguments[numArgs], tokenized);
		}



		if(strcmp(arguments[0], "byebye") == 0){

			// free everything

			clearDynArr(tokenized);
			clearStringPtr(cmdHistory, cmdCount);
			clearStringPtr(arguments, numArgs);
			byebye();
		}
		else if(strcmp(arguments[0], "history") == 0){

			if(strcmp(arguments[1], "-c") == 0){
				clearStringPtr(cmdHistory, cmdCount);
				cmdCount = 0;
			}else{
			history(cmdHistory, cmdCount);

			//for(int i = 0; i < (cmdCount); i++)
			//	printf("[%d]: %s\n", i, cmdHistory[i]);
			}
		}else if(strcmp(arguments[0], "whereami") == 0){

			whereami();
		}else if(strcmp(arguments[0], "movetodir") == 0){

			movetodir(arguments[1]);

		}else if((strcmp(arguments[0], "start") == 0)){

			pid_t pid;
			int status, died;

			char* param[50];
			char* program;
			int numParam = numArgs - 1;

			// allocating space
			for(int i = 0; i < 50; i++)
				param[i] = malloc(sizeof(char) * 100);

			// getting the program
			program = arguments[1];

			// storing parameters from tokens
			for(int i = 1, j = 0; i < numArgs; i++, j++)
				strcpy(param[j], arguments[i]);


			// appending the NULL
			param[numArgs - 1] = '\0';

			pid = fork();

			if(pid == 0){
				execvp(program, param);
			}else{
				died = waitpid(pid, &status, 0);
			}

		}else if(strcmp(arguments[0], "background") == 0){

			pid_t pid;
			int status, died;

			char* param[50];
			char* program;
			int numParam = (numArgs - 1);

			// allocating space
			for(int i = 0; i < 50; i++)
				param[i] = malloc(sizeof(char) * 100);

			// getting the program
			program = arguments[1];

			// storing parameters from tokens
			for(int i = 1, j = 0; i < numArgs; i++, j++)
				strcpy(param[j], arguments[i]);


			// appending the NULL
			param[numArgs - 1] = '\0';

			pid = fork();

			printf("pid: %d\n", pid);

			if(pid == 0){
				printf("small CHUNGUS\n");
				setpgid(0,0);
				execvp(program, param);
				continue;
			}
			else{
				// waitpid(3);
				waitpid(pid, 0, WNOHANG);
				// printf("parents process:\n");
				// continue;

			}

		}else if(strcmp(arguments[0], "exterminate") == 0){

			 pid = atoi(arguments[1]);
			// Kill process
			// Print :success or failure
			(kill(pid, SIGKILL) == 0) ? printf("PID: %d\tKill confirmed\n", pid) : printf("PID: %d\tAlive\n", pid);
		}

		// Resetting some things
		printf("Cleaning up\n");
		clearStringPtr(arguments, numArgs);
		numArgs = 0;
	}




	return 0;
}
