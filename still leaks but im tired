#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <sys/wait.h>

#define TRUE 1
#define FALSE 0

#define NUM_TOKENS 100
#define TOKEN_LENGTH 100
#define COMMAND_LENGTH 100
#define NUM_ARGUMENTS 100
#define NUM_PARAMETERS 100
#define PARAMETER_LENGTH 100
#define BUFFER_LENGTH 100
#define NUM_PID 100


void exterminate(int pid);

// Linked list to store the process IDs (PIDs) for each process that runs in the background
typedef struct PidList{
	// Process ID
	int pid;
	// Link to next node
	struct PidList* next;
} pidList;

// Returns a new pidList object
pidList* newNode(void){
	return calloc(1, sizeof(pidList));
}

// Inserts a new node to the head of the linked list
void add(pidList** head, int pid){
	// Create node
	pidList* node = newNode();

	// Initialize the node's fields
	node->pid = pid;
	// Link this node's next pointer to the head
	node->next = (*head);

	// This node is the new head
	(*head) = node;
}

// Traverses the linked list and prints all active PIDs
void printPID(pidList* head){

	while(head != NULL){
		printf("%d\n", head->pid);
		head = head->next;
	}

}

// Removes the node from the linked list specified by its PID and kills the process.
//Returns if the PID is not found.
void delete(pidList** head, int pid_to_delete){

	// Pointers used to relink nodes to ensure proper deletion of a node
	pidList* tmp = *head, *previous;

	// Found PID key at the head node
	if(tmp != NULL && tmp->pid == pid_to_delete){

		// The new head should be the tmp's next pointer
		*head = tmp->next;

		// Kill the process
		exterminate(pid_to_delete);
		// Free allocated space

		free(tmp);
		printf("\n");
		return;
	}

	// Search for the node with the PID to delete
	while(tmp != NULL && tmp->pid != pid_to_delete){
		previous = tmp;
		tmp = tmp->next;
	}

	// No node with PID found
	if (tmp == NULL)
		return;

	// Link previous node to the node after the deleted node
	previous->next = tmp->next;

	// Kill the process
	exterminate(pid_to_delete);

	// Free allocated space
	free(tmp);

}

// Destroys the linked list
void freeHistory(pidList* head){
	pidList* temp;
	while(head != NULL){
		temp = head;
		head = head->next;
		free(temp);
	}
}

// Kills are processes.
void exterminateAll(pidList** head){
	pidList* tmp = *head;
	pidList* next;

	printf("Murdering: ");

	while(tmp != NULL){
		// Capture the next node
		next = tmp->next;
		printf("%d ", tmp->pid);
		// Kill the process that corresponds to the head node
		kill(tmp->pid, SIGKILL);
		// Remove the head from the list
		free(tmp);
		// Relink the head
		tmp = next;
	}

	// Destroy head reference
	*head = NULL;
	printf("\n");
	return;
}



// Prints and returns the file path of the current directory
char* whereami(){

	char path [100];

	printf("%s\n", getcwd(path, 100));
	return getcwd(path,100);
}

// Terminates the program
int byebye(){
	exit(1);
	return 0;
}

// Changes directories to the specifed directory if there is one
void movetodir(char* dir){

	if (chdir(dir) != 0)
		perror("chdir() to /dir");
	else
		printf("Changed directory to: %s\n", dir);

}

// Prints the history of all commands typed into the shell
void history(char** commands, int cmdCount){

	for(int i = 0; i < cmdCount; i++){
		printf("[%d]: %s\n", i, commands[i]);
	}
}

// Runs a single instance of a program in the foreground
void start(char* param[], char* program){
	pid_t pid;
	int status;

	// Forks a child process from the parent process
	pid = fork();

	// New process runs in the child process
	if(pid == 0){
		execvp(program, param);
		exit(1);
	}else{
		// Parent waits for the child process to finish
		// waitpid(pid, &status, 0);
		waitpid(pid, 0, WUNTRACED);
	}
}

// Runs a single instance of a program in the background
void background(char* param[], char* program, pidList** head){

	pid_t pid;
	int status;

	// Forks a child process from the parent process
	pid = fork();

	printf("pid: %d\n", pid);

	if(pid == 0){
		execvp(program, param);
		exit(1);
	}
	else{
		add(head, pid);
		status = waitpid(pid, 0, WNOHANG);
		delete(head, status);
		return;
	}
}

// Kills a single process specified by its PID
void exterminate(int pid){

	(kill(pid, SIGKILL) == 0) ? printf("PID: %d\tKill confirmed\n", pid) : printf("PID: %d\tAlive\n", pid);
}

// Deallocates memory in a 2D char array
void clearStringPtr(char** ptr, int len){

	for(int i = 0; i < len; i++){
		free(ptr[i]);
	}

	free(ptr);
}

// Deallocates memory in a array of char pointers
void clearCharArr(char* ptr[], int len){

	for(int i = 0; i < len; i++){
		// printf("freeing: [%d]\n", i);
		free(ptr[i]);
	}
}

// Replaces the newline character with a space
void trimNewLine(char buffer[]){

	for(int i = 0; i < strlen(buffer); i++){
		if(buffer[i] == '\n')
			buffer[i] = ' ';
	}
}

void begin(){

	pidList *historyP = NULL;
	char** arguments = malloc(sizeof(char*) * NUM_ARGUMENTS);
	char** cmdHistory = malloc(sizeof(char*) * COMMAND_LENGTH);
	char* tokenized;
	int pidHistory [NUM_PID];
	char cmdBuffer [BUFFER_LENGTH];
	int numArgs = 0;
	int cmdCount = 0;
	int pid;
	int j;

	char delimiter [4] = " ";

	// Shell loop
	while(TRUE)
	{
		printf("# ");

		// Scan in command with possible arguments
		fgets(cmdBuffer,sizeof(cmdBuffer), stdin);
		trimNewLine(cmdBuffer);

		// Allocating space for the command history
		cmdHistory[cmdCount] = malloc((strlen(cmdBuffer) + 1) * sizeof(char));

		// Adding command to command history
		strcpy(cmdHistory[cmdCount++], cmdBuffer);

		// Tokenizing the command
		tokenized = strtok(cmdBuffer, delimiter);

		// Storing the tokens
		while(tokenized != NULL){

			// Allocate space for the argument
			// arguments[numArgs] = malloc(sizeof(char) * (strlen(tokenized) + 1));
			arguments[numArgs] = calloc((strlen(tokenized) + 1), sizeof(char));

			// Store the argument
			strcpy(arguments[numArgs++] , tokenized);

			// Go to the next token
			tokenized = strtok(NULL, delimiter);
		}

		if(strcmp(arguments[0], "byebye") == 0){

			free(tokenized);
			clearStringPtr(arguments, numArgs);
			clearStringPtr(cmdHistory, cmdCount);
			freeHistory(historyP);
			byebye();
		}
		else if(strcmp(arguments[0], "history") == 0){
			if(numArgs > 1 && strcmp(arguments[1], "-c") == 0){
				clearStringPtr(cmdHistory, cmdCount);
				cmdCount = 0;
			}else if(numArgs == 1){
				history(cmdHistory, cmdCount);
			}
		}else if(strcmp(arguments[0], "whereami") == 0){
			whereami();
		}else if(strcmp(arguments[0], "movetodir") == 0){
			movetodir(arguments[1]);
		}else if(((strcmp(arguments[0], "start") == 0) || (strcmp(arguments[0], "background")) == 0) && numArgs > 1){

			char* param[numArgs - 1];

			// allocating space
			for(int i = 0; i < (numArgs - 1); i++)
				param[i] = malloc(sizeof(char) * 100);

			// storing parameters from tokens
			for(int i = 1, j = 0; i < numArgs; i++, j++)
				strcpy(param[j], arguments[i]);

			// appending the NULL charcater for execvp
			param[numArgs - 1] = '\0';

			if(strcmp(arguments[0], "start") == 0)
				start(param,arguments[1] );
			else if(strcmp(arguments[0], "background") == 0)
				background(param, arguments[1], &historyP);

				clearCharArr(param, (numArgs));
		}else if(strcmp(arguments[0], "exterminate") == 0){
			delete(&historyP, atoi(arguments[1]));
		}else if(strcmp(arguments[0], "pidhistory") == 0) {
			printPID(historyP);
		}else if(strcmp(arguments[0], "exterminateall") == 0) {
			exterminateAll(&historyP);
		}else{
			printf("Not a valid command\n");
		}
		free(tokenized);
		numArgs = 0;
	}

}

int main(int argc, char const *argv[]) {
	begin();
	return 0;
}
